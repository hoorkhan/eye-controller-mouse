import cv2
import mediapipe as mp 
import pyautogui 

cam = cv2.VideoCapture(0)
mp_face_mesh = mp.solutions.face_mesh
face_mesh = mp_face_mesh.FaceMesh(refine_landmarks=True)
screen_w, screen_h = pyautogui.size()

while True:  
    _, frame = cam.read()
    frame = cv2.flip(frame, 1) 
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    output = face_mesh.process(rgb_frame)
    landmark_points = output.multi_face_landmarks

    frame_h, frame_w, _ = frame.shape

    if landmark_points:
        landmarks = landmark_points[0].landmark

        left_eye = [landmarks[145], landmarks[159]]  
        right_eye = [landmarks[374], landmarks[386]]  

        for landmark in left_eye:
            x = int(landmark.x * frame_w)
            y = int(landmark.y * frame_h)
            cv2.circle(frame, (x, y), 3, (0, 0, 255), -1) 
        for landmark in right_eye:
            x = int(landmark.x * frame_w)
            y = int(landmark.y * frame_h)
            cv2.circle(frame, (x, y), 3, (255, 0, 0), -1)
         
        left_eye_center = ((left_eye[0].x + left_eye[1].x) / 2, (left_eye[0].y + left_eye[1].y) / 2)
        right_eye_center = ((right_eye[0].x + right_eye[1].x) / 2, (right_eye[0].y + right_eye[1].y) / 2)

        avg_eye_center_x = (left_eye_center[0] + right_eye_center[0]) / 2
        avg_eye_center_y = (left_eye_center[1] + right_eye_center[1]) / 2

        screen_x = int(avg_eye_center_x * screen_w)
        screen_y = int(avg_eye_center_y * screen_h)

        pyautogui.moveTo(screen_x, screen_y)

        
        nose_tip = landmarks[1] 
        chin = landmarks[152]  
        head_tilt = nose_tip.y - chin.y

        if head_tilt > 0.05:  
            pyautogui.hotkey('win', 'up') 
            print("Window Maximized!")
            pyautogui.sleep(1)
        elif head_tilt < 0.03:  
            pyautogui.hotkey('win', 'down')  
            print("Window Minimized!")
            pyautogui.sleep(1)

        # Left and Right Eye Blinks
        if (left_eye[0].y - left_eye[1].y) < 0.004:
            pyautogui.click(button='left')
            pyautogui.sleep(1)
        if (right_eye[0].y - right_eye[1].y) < 0.004:
            pyautogui.click(button='right')
            pyautogui.sleep(1)
    cv2.imshow('Eye Controlled Mouse', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
cam.release()
cv2.destroyAllWindows()
